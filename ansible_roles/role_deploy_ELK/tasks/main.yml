---
- name: Upgrade all apt packages to the latest version
  shell: |
      apt dist-upgrade -y 
      apt update -y
      apt upgrade -y
  
- name: Check if a reboot is needed for Debian and Ubuntu boxes
  register: reboot_required_file
  stat: path=/var/run/reboot-required get_md5=no

- name: Reboot the Debian or Ubuntu server
  reboot:
        msg: "Reboot initiated by Ansible due to kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
  when: reboot_required_file.stat.exists

# Add-on tools
#- name: Installing Visualizing and provisioning tools 
#  package:
#      name: "{{ item }}"
#      state: latest
#  loop:
#    - nmon 
#    - glances
#    - iftop 
#    - atop 
#    - htop 
#    - dstat 
#    - smem

- name: Add Elasticsearch repository and its keyrings to fix warning
  shell: |
       apt-get install apt-transport-https
       #echo "deb https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-8.x.list
       curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elastic-archive-keyring.gpg
       echo 'deb [signed-by=/usr/share/keyrings/elastic-archive-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main' | sudo tee /etc/apt/sources.list.d/elastic-8.x.list
       apt update -y
       apt upgrade -y

        
- name: Update package cache
  apt:
     update_cache: yes

- name: Install ELK stack
  apt:
       name: "{{ item }}"
       state: latest

  loop: "{{ ELK }}"
- name: persist_elk
  shell: |
     systemctl enable elasticsearch
     systemctl enable kibana
     systemctl enable logstash


# Configuring ELK 
#
#
#
- name: Configuring Elasticsearch conf file {Cluster name}
  lineinfile:
      path: /etc/elasticsearch/elasticsearch.yml
      regex: '^#cluster.name'
      line: 'cluster.name: Cluster_ansi'
- name: Configuring Elasticsearch conf file {xpack.monitoring.collection}
  lineinfile:
      path: /etc/elasticsearch/elasticsearch.yml
      regex: '^#xpack.monitoring.collection.enabled:'
      line: 'xpack.monitoring.collection.enabled: true'
- name: Configuring Elasticsearch conf file {xpack.monitoring.elasticsearch.collection}
  lineinfile:
      path: /etc/elasticsearch/elasticsearch.yml
      regex: '^#xpack.monitoring.elasticsearch.collection.enabled:'
      line: 'xpack.monitoring.elasticsearch.collection.enabled: true'
- name: Configuring Elasticsearch conf file {node.name}
  lineinfile:
      path: /etc/elasticsearch/elasticsearch.yml
      regex: '^#node.name:'
      line: 'node.name: node1'
- name: Configuring Elasticsearch conf file {network.host}
  lineinfile:
      path: /etc/elasticsearch/elasticsearch.yml
      regex: '^#network.host:'
      line: 'network.host: 0.0.0.0'
- name: Configuring Elasticsearch conf file {http.port}
  lineinfile:
      path: /etc/elasticsearch/elasticsearch.yml
      regex: '^#http.port:'
      line: 'http.port: 9200'
- name: Setting up single-node
  lineinfile:
        path: /etc/elasticsearch/elasticsearch.yml
        line: "discovery.type: single-node"
        insertafter: EOF
- name: Configuring Elasticsearch conf file {transport.host} Allowing other Hosts that are not in same network to join the cluster 
  lineinfile:
      path: /etc/elasticsearch/elasticsearch.yml
      regex: '^#transport.host:'
      line: 'transport.host: 0.0.0.0'

- name: adding { http.port }
  lineinfile:
      path: /etc/elasticsearch/elasticsearch.yml
      line: "http.host: 0.0.0.0"

- name: Removing the master-nodes list
  lineinfile:
      path: /etc/elasticsearch/elasticsearch.yml
      regex: '^cluster.initial_master_nodes'
      line: '#cluster.initial_master_nodes'
      insertafter: EOF
- name: restart_elasticsearch
  shell:  systemctl restart elasticsearch.service

  
# Kibana
# Already 5601 port
#- name: Configuring Kibana conf file {server.port}
#  lineinfile:
#      path: /etc/kibana/kibana.yml
#      regex: '^#server.port:'
#      line: 'server.port: 5601'

# instead of 0.0.0.0 it is already behind nginx, and localhost by default
#- name: Configuring Kibana conf file {server.host}
#  lineinfile:
#      path: /etc/kibana/kibana.yml
#      regex: '^#server.host:'
#      line: 'server.host: localhost' 
- name: Configuring Kibana conf file {server.publicBaseUrl}
  lineinfile:
      path: /etc/kibana/kibana.yml
      regex: '^#server.publicBaseUrl:'
      line: 'server.publicBaseUrl: "https://ansi-elk.duckdns.org"'
      insertafter: EOF
- name: Configuring Kibana conf file {server.name}
  lineinfile:
      path: /etc/kibana/kibana.yml
      regex: '^#server.name:'
      line: 'server.name: "ansi-elk"'
# Already done automatically
#- name: Configuring Kibana conf file {elasticsearch.hosts}
#  lineinfile:
#      path: /etc/kibana/kibana.yml
#      regex: '^#elasticsearch.hosts:'
#      line: 'elasticsearch.hosts: ["https://localhost:9200"]'
- name: Kibana auto configuration
  debug:
       msg: "Now all of the certificate fingerprint of elasticsearch to ensure communication and the private ip address of the elasticsearch node will all be automatically added to the kibana.yml"
- name: Gathering elastic search token for kibana auto configuration
  shell: |
        /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token --scope kibana > /root/elasticsearch_token
        chmod 600 /root/elasticsearch_token
- name: retrieve the elasticsearch_token
  slurp:
       src: /root/elasticsearch_token
  register: elastic_token
  
- name: Starting kibana autoconfiguration
  command: "/usr/share/kibana/bin/kibana-setup"
  args:
        stdin: "{{ elastic_token.content | b64decode }}"

- name: restart_kibana
  shell: systemctl restart kibana.service
  
- name: restart_logstash
  shell: systemctl restart logstash.service


- name: Generate the 3 keys
  shell: |
        /usr/share/kibana/bin/kibana-encryption-keys generate --force | grep -A 3 "Settings:" | grep -v "Settings:" > /root/params_xpack
        chmod 600 /root/params_xpack
- name: retrieve the keys with xpack params
  slurp:
       src: /home/ubuntu/params_xpack
  register: params_xpack

- name: Inserting params
  lineinfile:
      path: /etc/kibana/kibana.yml
      line: "{{ params_xpack.content | b64decode }}"
      insertafter: EOF



# Changing elastic password and saving it in the current directory for later use in 600 mode
- name: Chaning elastic password
  shell: |
     yes | sudo /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic | grep -oP 'New value: \K.*' > /root/elastic_pw
       chmod 600 /root/elastic_pw
     
    # This is another method for the regex parsing
    # '/New value:/ {print $NF}' output.txt
    #  sed -n 's/New value: //p' output.txt
- name: retrieve the elastic_pw value
  slurp:
       src: /root/elastic_pw
  register: elastic_pw_val

# Managing the keystore for secure rest //// Another way to setup passwords without changing the elasticsearch parameters in kibana  /// this should be done after token enrollment
# Don't use a privileged user like elastic
#- name: Creating a keystore for the stores
#  shell: /usr/share/kibana/bin/kibana-keystore create
#- name: Adding Keystore with the exact parameter name in kibana.yml
#  command: "/usr/share/kibana/bin/kibana-keystore add elasticsearch.username"
#  args:
#        stdin: "elastic"
#- name: Adding Keystore with the exact parameter name in kibana.yml
#  command: "/usr/share/kibana/bin/kibana-keystore add elasticsearch.password"
#  args:
#        stdin: "{{ elastic_pw_val.content | b64decode }}"

#=========================================================



# Advanced parameters used when we have a reverse proxy infront kibana
# The elasticsearch parameter server.rewriteBasePath set to true when we have the server.basePath has a value in kibana.yml, used to tell Kibana if it should remove the basePath from requests it receives, and to prevent a deprecation warning at startup.

#- name: Configuring Kibana conf to handle the reverse proxy requests {server.basePath}
#  lineinfile:
#      path: /etc/kibana/kibana.yml
#      regex: '^#server.basePath:'
#      line: 'server.basePath: "/login"'

#- name: Configuring Kibana conf to handle the reverse proxy requests {server.rewriteBasePath}
#  lineinfile:
#        path: /etc/elasticsearch/elasticsearch.yml
#        line: "server.rewriteBasePath: true"
#        insertafter: EOF
#  notify: restart_kibana


# Directory layout
#
#
#
- name: Fixing Config File Ownership and Permissions of elasticsearch
  shell: |
   chown elasticsearch:elasticsearch -R /usr/share/elasticsearch
   chown elasticsearch:elasticsearch -R /var/log/elasticsearch
   chown elasticsearch:elasticsearch -R /var/lib/elasticsearch
   chown elasticsearch:elasticsearch -R /etc/default/elasticsearch
   chown elasticsearch:elasticsearch -R /etc/elasticsearch

- name: Fixing Config File Ownership and Permissions of kibana
  shell: |
    chown kibana:kibana -R /usr/share/kibana
    chown kibana:kibana -R /var/log/kibana
    chown kibana:kibana -R /var/lib/kibana
    chown kibana:kibana -R /etc/default/kibana
    chown kibana:kibana -R /etc/kibana

- name: Fixing Config File Ownership and Permissions of logstash
  shell: |
    chown logstash:logstash -R /usr/share/logstash
    chown logstash:logstash -R /var/log/logstash
    chown logstash:logstash -R /var/lib/logstash
    chown logstash:logstash -R /etc/default/logstash
    chown logstash:logstash -R /etc/logstash
    
- name: Fixing permission of config files of beats
  debug:
     msg: "Now ownership management is done inside the beats role"
    



